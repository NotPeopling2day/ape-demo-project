{"language": "Solidity", "sources": {"FundMe.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ncontract FundMe {\n    address public owner;\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n    bool public enabled;\n\n    error InsufficientFund(uint256 given, uint256 required);\n\n    struct Sender {\n        address sender;\n    }\n\n    constructor() {\n        owner = msg.sender;\n        enabled = true;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!authorized\");\n        _;\n    }\n\n    modifier isOn() {\n        require(enabled);\n        _;\n    }\n\n    event Fund(address indexed funder, uint256 amount);\n\n    function getSecret() public onlyOwner view returns(uint256 secret) {\n        return 123;\n    }\n\n    function getSender() public view returns(address) {\n        return msg.sender;\n    }\n\n    function getSenderStruct() public view returns(Sender memory) {\n        return Sender(msg.sender);\n    }\n\n    function getSecrets() public onlyOwner view returns(uint256 secret1, uint256 secret2) {\n        return (123, 321);\n    }\n\n    function getSecretsNotAllNamed() public onlyOwner view returns(uint256, uint256 secret2) {\n        return (123, 321);\n    }\n\n    function changeOnStatus(bool newValue) public onlyOwner {\n        enabled = newValue;\n    }\n\n    function fund() public payable isOn {\n        if (msg.value <= 0) {\n            revert InsufficientFund(msg.value, 1);\n        }\n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n        emit Fund(msg.sender, msg.value);\n    }\n\n    function withdraw() public payable onlyOwner isOn {\n        payable(msg.sender).transfer(address(this).balance);\n\n        for (uint funderIndex=0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        funders = new address[](0);\n    }\n}\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"FundMe.sol": {"FundMe": ["abi", "bin", "bin-runtime", "devdoc", "userdoc"]}}}}